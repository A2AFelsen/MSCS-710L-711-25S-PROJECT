name: Create Release

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' ||
      (github.event.workflow_run.conclusion == 'failure' &&
       !contains(toJson(github.event.workflow_run.jobs.*.name), 'build-and-test') &&
       !contains(toJson(github.event.workflow_run.jobs.*.name), 'codeql'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug Workflow Run Info
        run: |
          echo "Workflow Run ID: ${{ github.event.workflow_run.id }}"
          echo "Repository: ${{ github.repository }}"
          echo "Run Attempt: ${{ github.run_attempt }}"

      - name: List Available Artifacts (Detailed)
        uses: actions/github-script@v6
        id: list-artifacts
        with:
          script: |
            try {
              const response = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.payload.workflow_run.id,
              });
              console.log('Available artifacts:');
              response.data.artifacts.forEach(artifact => {
                console.log(`- ${artifact.name} (ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes, Created: ${artifact.created_at})`);
              });
              return response.data.artifacts;
            } catch (error) {
              console.error('Error listing artifacts:', error);
              core.setFailed('Failed to list artifacts');
              return [];
            }

      - name: Download .NET 4.8 Artifact (Alternative Method)
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          name: build-artifacts-4.8
          path: release_files
          workflow: ci-cd-pipeline.yml
          run_id: ${{ github.event.workflow_run.id }}
          repo: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Artifact Download
        run: |
          echo "Contents of release_files:"
          ls -R release_files || true
          if [ ! -f "release_files/OpenHardwareMonitor/bin/Release/OpenHardwareMonitor.exe" ]; then
            echo "Checking alternative paths..."
            find release_files -name "OpenHardwareMonitor.exe" || true
            echo "Error: OpenHardwareMonitor.exe not found in expected location!"
            exit 1
          fi

      - name: Prepare Display Files
        run: |
          mkdir -p release_files/OpenHardwareMonitor/Display
          cp -r Display/* release_files/OpenHardwareMonitor/Display/
          rm -rf release_files/OpenHardwareMonitor/Display/__pycache__
          rm -f release_files/OpenHardwareMonitor/Display/*.pyc

      - name: Create Zip Package
        run: |
          cd release_files/OpenHardwareMonitor
          zip -r ../../OpenHardwareMonitor-Release.zip ./*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "OpenHardwareMonitor v$(date +'%Y.%m.%d')"
          body: "Automatic release containing the latest build"
          files: OpenHardwareMonitor-Release.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
