name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint code base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Super-Linter
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILTER_REGEX_EXCLUDE: .*\.github/workflows/superlinter\.yml.*
          MARKDOWN_FIX_END_OF_FILE: true
          PYTHON_BLACK_CONFIG_FILE: .python-black
          PYTHON_ISORT_CONFIG_FILE: .isort.cfg

  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    strategy:
      matrix:
        dotnet-version: ['4.8', '6.0.x', '7.0.x'] # Test multiple frameworks
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x

      # Special handling for .NET Framework 4.8
      - name: Install .NET Framework 4.8 Developer Pack
        if: matrix.dotnet-version == '4.8'
        run: choco install netfx-4.8-devpack -y # Chocolatey package

      - name: Restore NuGet packages
        run: nuget restore OpenHardwareMonitor/OpenHardwareMonitor.sln

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.x'

      - name: Execute GitVersion
        id: gitversion_execute
        uses: gittools/actions/gitversion/execute@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print version
        run: echo "Version ${GITVERSION_OUTPUT:-Unknown}"

      # Different build commands for Framework vs Core
      - name: Build the project
        shell: pwsh
        run: |
          if ("${{ matrix.dotnet-version }}" -eq "4.8") {
              & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" OpenHardwareMonitor/OpenHardwareMonitor.sln /p:Configuration=Release
          } else {
              dotnet build OpenHardwareMonitor/OpenHardwareMonitor.sln --configuration Release
          }

      - name: Run tests
        run: dotnet test OpenHardwareMonitor/OpenHardwareMonitor.sln --no-build --configuration Release

      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.dotnet-version }}
          path: |
            OpenHardwareMonitor/bin/Release/
        if: matrix.dotnet-version != '4.8'

      # Different artifact patterns for 4.8 (needs x64/x86 DLLs)
      - name: Publish .NET 4.8 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-4.8
          path: |
            OpenHardwareMonitor/bin/Release/
            OpenHardwareMonitor/bin/Release/x64/
            OpenHardwareMonitor/bin/Release/x86/
        if: matrix.dotnet-version == '4.8'

#  codeql:
#    name: CodeQL Analysis
#    runs-on: windows-latest
#    needs: build-and-test
#    permissions:
#      actions: read
#      contents: read
#      security-events: write
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 2
#
#      - name: Setup NuGet
#        uses: nuget/setup-nuget@v1
#        with:
#          nuget-version: '6.x'
#
#      - name: Restore NuGet packages
#        run: nuget restore OpenHardwareMonitor/OpenHardwareMonitor.sln
#
#      - name: Initialize CodeQL
#        uses: github/codeql-action/init@v2
#        with:
#          languages: 'csharp'
#          queries: security-extended,security-and-quality
#          config-file: .github/codeql/codeql-config.yml
#
#      - name: Build for CodeQL
#        shell: pwsh
#        run: |
#          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" OpenHardwareMonitor/OpenHardwareMonitor.sln /p:Configuration=Release
#
#      - name: Perform CodeQL Analysis
#        uses: github/codeql-action/analyze@v2
